<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalyseAllFrequenceListDescription" xml:space="preserve">
    <value>Performs a frequency analysis on all fields with a defined codeset</value>
  </data>
  <data name="AnalyseAllFrequenceListMessage" xml:space="preserve">
    <value>{0} occurrences of {1}</value>
  </data>
  <data name="AnalyseCountCharsDescription" xml:space="preserve">
    <value>Counts the number of characters in a file</value>
  </data>
  <data name="AnalyseCountCharsMessage" xml:space="preserve">
    <value>{0} characters</value>
  </data>
  <data name="AnalyseCountNullDescription" xml:space="preserve">
    <value>Counts the number of occurrences of null in the field</value>
  </data>
  <data name="AnalyseCountNullMessage" xml:space="preserve">
    <value>{0} occurrences of null</value>
  </data>
  <data name="AnalyseCountRecordDefinitionOccurrencesDescription" xml:space="preserve">
    <value>Counts the number of records for each record type</value>
  </data>
  <data name="AnalyseCountRecordDefinitionOccurrencesMessage" xml:space="preserve">
    <value>{0} records</value>
  </data>
  <data name="AnalyseCountRecordsDescription" xml:space="preserve">
    <value>Counts the number of records in a file</value>
  </data>
  <data name="AnalyseCountRecordsMessage" xml:space="preserve">
    <value>Total: {0} records</value>
  </data>
  <data name="AnalyseFindExtremeRecordsDescription" xml:space="preserve">
    <value>Finds the longest and shortest record for each record type</value>
  </data>
  <data name="AnalyseFindExtremeRecordsMessage" xml:space="preserve">
    <value>Longest/shortest record: {0}/{1}</value>
  </data>
  <data name="AnalyseFindExtremeValuesDescription" xml:space="preserve">
    <value>Finds the longest and shortest value in the field</value>
  </data>
  <data name="AnalyseFindExtremeValuesMessage" xml:space="preserve">
    <value>Longest/shortest value: {0}/{1}</value>
  </data>
  <data name="AnalyseFindMinMaxValueDescription" xml:space="preserve">
    <value>Finds the lowest and highest value in the field</value>
  </data>
  <data name="AnalyseFindMinMaxValueMessage" xml:space="preserve">
    <value>Lowest/highest value: {0}/{1}</value>
  </data>
  <data name="AnalyseFrequenceListDescription" xml:space="preserve">
    <value>Counts the number of occurrences of each value in the field</value>
  </data>
  <data name="AnalyseFrequenceListMessage" xml:space="preserve">
    <value>{0} occurrences of {1}</value>
  </data>
  <data name="ControlAccountNumberDescription" xml:space="preserve">
    <value>Control of control digits in an account number</value>
  </data>
  <data name="ControlAccountNumberMessage" xml:space="preserve">
    <value>Invalid account number: {0}</value>
  </data>
  <data name="ControlAllFixedLengthDescription" xml:space="preserve">
    <value>Validates given record lengths for all record types (fixed format only)</value>
  </data>
  <data name="ControlAllFixedLengthMessage" xml:space="preserve">
    <value>Mismatch between given record length ({0}) and actual record length ({1})</value>
  </data>
  <data name="ControlBirthNumberDescription" xml:space="preserve">
    <value>Validation of the control digits in a birth number</value>
  </data>
  <data name="ControlBirthNumberMessage" xml:space="preserve">
    <value>Invalid birth number: {0}</value>
  </data>
  <data name="ControlBooleanValueDescription" xml:space="preserve">
    <value>Validates values in a boolean field</value>
  </data>
  <data name="ControlBooleanValueMessage" xml:space="preserve">
    <value>Found non-boolean values: {0}</value>
  </data>
  <data name="ControlChecksumDescription" xml:space="preserve">
    <value>Checksum validation</value>
  </data>
  <data name="ControlChecksumMessage_ChecksumMismatch" xml:space="preserve">
    <value>Expected checksum: {0}
Actual checksum: {1}</value>
  </data>
  <data name="ControlChecksumMessage_ChecksumMissing" xml:space="preserve">
    <value>No checksum found in the ADDML file</value>
  </data>
  <data name="ControlChecksumMessage_UnknownChecksumAlgorithm" xml:space="preserve">
    <value>Unknown checksum algorithm: {0}</value>
  </data>
  <data name="ControlCodesDescription" xml:space="preserve">
    <value>Validates that defined codes are used, and that used codes are defined in the codelist</value>
  </data>
  <data name="ControlCodesMessage" xml:space="preserve">
    <value>Used codes not present in the codelist: {0}</value>
  </data>
  <data name="ControlDataFormatDescription" xml:space="preserve">
    <value>Validates given data format</value>
  </data>
  <data name="ControlDataFormatMessage" xml:space="preserve">
    <value>Invalid data format: {0}</value>
  </data>
  <data name="ControlDataFormatMessageExtension" xml:space="preserve">
    <value> + {0} more</value>
  </data>
  <data name="ControlDateValueDescription" xml:space="preserve">
    <value>Validation of date-field values</value>
  </data>
  <data name="ControlDateValueMessage" xml:space="preserve">
    <value>Values not validated as date: {0}</value>
  </data>
  <data name="ControlExtraOrMissingFilesDescription" xml:space="preserve">
    <value>Checks that existing files are defined in ADDML, and that files defined in ADDML are existing</value>
  </data>
  <data name="ControlExtraOrMissingFilesMessage1" xml:space="preserve">
    <value>Present in ADDML but missing from archive</value>
  </data>
  <data name="ControlExtraOrMissingFilesMessage2" xml:space="preserve">
    <value>Present in archive but missing from ADDML</value>
  </data>
  <data name="ControlFixedLengthDescription" xml:space="preserve">
    <value>Validates given record length (fixed format only)</value>
  </data>
  <data name="ControlFixedLengthMessage" xml:space="preserve">
    <value>Mismatch between given record length ({0}) and actual record length ({1})</value>
  </data>
  <data name="ControlForeignKeyDescription" xml:space="preserve">
    <value>Validates foreign keys</value>
  </data>
  <data name="ControlForeignKeyMessage1" xml:space="preserve">
    <value>Invalid foreign key: The value [{0}] does not exist in the referred field {1}</value>
  </data>
  <data name="ControlForeignKeyMessage1Combined" xml:space="preserve">
    <value>Invalid foreign key: The values [{0}] does not exist in the referred fields {1}</value>
  </data>
  <data name="ControlForeignKeyMessage2" xml:space="preserve">
    <value>Invalid foreign key: Can not find any values for the field {0}</value>
  </data>
  <data name="ControlKeyDescription" xml:space="preserve">
    <value>Validates uniqueness of the key (primary eller alternate)</value>
  </data>
  <data name="ControlKeyMessage" xml:space="preserve">
    <value>The following primary key values are not unique: {0}</value>
  </data>
  <data name="ControlMaxLengthDescription" xml:space="preserve">
    <value>Checks whether the stated maximum length is actually the largest length in the field</value>
  </data>
  <data name="ControlMaxLengthMessage" xml:space="preserve">
    <value>Values longer than the maximum length: {0}</value>
  </data>
  <data name="ControlMinLengthDescription" xml:space="preserve">
    <value>Checks whether the stated minimum length is actually the smallest length in the field</value>
  </data>
  <data name="ControlMinLengthMessage" xml:space="preserve">
    <value>Values smaller than the minimum length: {0}</value>
  </data>
  <data name="ControlNotNullDescription" xml:space="preserve">
    <value>Checks the field for null-values</value>
  </data>
  <data name="ControlNotNullMessage" xml:space="preserve">
    <value>NULL values exists</value>
  </data>
  <data name="ControlNotUsedRecordDefDescription" xml:space="preserve">
    <value>Checks if this record type is used in the dataset</value>
  </data>
  <data name="ControlNotUsedRecordDefMessage" xml:space="preserve">
    <value>The record type is not in use</value>
  </data>
  <data name="ControlNumberOfRecordsDescription" xml:space="preserve">
    <value>Counts and checks that the number of records in the file is equal to the number specified in the numberOfRecords property in flatFile</value>
  </data>
  <data name="ControlNumberOfRecordsMessage1" xml:space="preserve">
    <value>Expected number of records not specified. Unable to control number of records</value>
  </data>
  <data name="ControlNumberOfRecordsMessage2" xml:space="preserve">
    <value>Number of records ({0}) matched</value>
  </data>
  <data name="ControlNumberOfRecordsMessage3" xml:space="preserve">
    <value>Number of records did not match. Expected {0}, found {1}</value>
  </data>
  <data name="ControlOrganizationNumberDescription" xml:space="preserve">
    <value>Validation of the control digits in an organisation number</value>
  </data>
  <data name="ControlOrganizationNumberMessage" xml:space="preserve">
    <value>Invalid organisation number: {0}</value>
  </data>
  <data name="ControlUniquenessDescription" xml:space="preserve">
    <value>Validates uniqueness of the values in the field</value>
  </data>
  <data name="ControlUniquenessMessage1" xml:space="preserve">
    <value>All values are unique</value>
  </data>
  <data name="ControlUniquenessMessage2" xml:space="preserve">
    <value>{0} is not a unique value</value>
  </data>
  <data name="ExceptionFixedLengthSumIsNotCorrect" xml:space="preserve">
    <value>{0}: The number of characters in the FixedLength field [{1}] does not match the number of characters summed for the record definition [{2}].</value>
  </data>
  <data name="ExceptionReadingAddmlFile" xml:space="preserve">
    <value>Error while loading ADDML.
{0}</value>
  </data>
  <data name="LogMessageFinishedTesting" xml:space="preserve">
    <value>Testing of archive completed.</value>
  </data>
  <data name="LogMessageStartTesting" xml:space="preserve">
    <value>Starting testing of archive.</value>
  </data>
  <data name="NumberOfRecordsWithFieldDelimiterErrorDescription" xml:space="preserve">
    <value>Summary of the number of records with errors associated with field separator and/or record separator.</value>
  </data>
  <data name="ReadingArchiveEvent" xml:space="preserve">
    <value>Reading archive</value>
  </data>
  <data name="ReadingArchiveEventFinishedMessage" xml:space="preserve">
    <value>Archive is loaded.</value>
  </data>
  <data name="RunningAddmlProcessesOnFile" xml:space="preserve">
    <value>ADDML processes on the file: {0}</value>
    <comment>{0} angir filnavn på filen som blir testet.</comment>
  </data>
  <data name="TarExtractionEvent" xml:space="preserve">
    <value>Archive extraction</value>
  </data>
  <data name="TarExtractionMessageFinished" xml:space="preserve">
    <value>Archive is extracted to {0}</value>
    <comment>{0} angir filsti til utpakket arkiv.</comment>
  </data>
  <data name="TarExtractionMessageStarted" xml:space="preserve">
    <value>Starting extraction.</value>
  </data>
  <data name="ValidatingExtractMessage" xml:space="preserve">
    <value>Validating extract</value>
  </data>
  <data name="LineTraceMessage" xml:space="preserve">
    <value>{0} - line(s): {1}</value>
    <comment>{0} filnavn, {1} linjenr med feil</comment>
  </data>
  <data name="Noark4ValidationNotSupported" xml:space="preserve">
    <value>Validation of Noark4-extracts is not supported</value>
  </data>
  <data name="PdfAValidationEventId" xml:space="preserve">
    <value>PDF/A validation</value>
  </data>
</root>